{# This is the paradigm template for Spanish. #}

{# Definitions and macros #}

{%- set first_l = lexicon_entry|xpath('lg/l')|first %}
{% set lemma = first_l|text %}
{% set pos = first_l|xpath('@pos')|first %}
{% set paradigm_exists = paradigm|length > 0 %}

{## Noun specific macros and definitions ##}
{%- if pos|upper == 'N' %}

    {% set sg_forms = paradigm|by_tagset_value("number", "Sg")|group_by_tag|list %}
    {% set pl_forms = paradigm|by_tagset_value("number", "Pl")|group_by_tag|list %}

    {# Use izip_longest to fill in the extra blanks spaces when one list
       ends first #}

    {% set zipped_numbers = izip_longest(sg_forms, pl_forms, fillvalue='-')|list %}
    {% set paradigm_exists = zipped_numbers|length > 0 %}

    {% set pos_text = "N"|tagfilter(_from, _to) %}
    {% set sg_text = "Sg"|tagfilter(_from, _to) %}
    {% set pl_text = "Pl"|tagfilter(_from, _to) %}

    {% if pos|upper == 'N' %}
        {% set pos_text = pos|upper|tagfilter(_from, _to) %}
    {% elif pos|upper == 'NUM' %}
        {% set pos_text = 'Num'|tagfilter(_from, _to) %}
    {% endif %}

    {% macro clean_tag(tag_input) %}
        {{ tag_input|tagfilter(_from, _to)
                    |replace(pos_text, "") }}
    {% endmacro %}

{% endif -%}

{## Verb specific macros and definitions ##}
{%- if pos|upper == 'V' %}

    {% set present_verbs_ind   = paradigm|by_tagset_value("tense", "Prs")
                                         |by_tagset_value("mode", "Ind")
                                         |group_by_tag %}

    {% set preterite_verbs_ind = paradigm|by_tagset_value("tense", "PrtIndef")
                                         |by_tagset_value("mode", "Ind")
                                         |group_by_tag %}

    {% set zipped_verbs_ind = izip_longest(present_verbs_ind, preterite_verbs_ind, fillvalue='-')|list %}

    {% set subjunctive_verbs   = paradigm|by_tagset_value("tense", "Prs")
                                         |by_tagset_value("mode", "Sbj")
                                         |group_by_tag %}

    {% set imperative_verbs = paradigm|by_tagset_value("mode", "Imp")
                                      |group_by_tag
                                      |insert_value(0, '-') %} {# Insert a '-' as there is no 1.sg. form of the imperative #}
    
    {# imperative_verbs.insert(0, '-') #}

    {% set zipped_verbs_sbj_imp = izip_longest(subjunctive_verbs, imperative_verbs, fillvalue='-')|list %}

    {% set nonfinite_forms = paradigm|by_tagset("nonfinite_paradigm") %}

    {## Display texts ##}
    {% set prs_text   = "Prs"|tagfilter(_from, _to) %}
    {% set prt_text   = "PrtIndef"|tagfilter(_from, _to) %}
    {% set verb_text  = "V"|tagfilter(_from, _to) %}
    {% set verb_text_ind = "Ind"|tagfilter(_from, _to) %}
    {% set verb_text_imp = "Imp"|tagfilter(_from, _to) %}
    {% set verb_text_sbj = "Sbj"|tagfilter(_from, _to) %}
    {% set verb_second_p = "P2"|tagfilter(_from, _to) %}
    {% set sg_text = "Sg"|tagfilter(_from, _to) %}
    {% set msc_text = "Msc"|tagfilter(_from, _to) %}
    {% set prfprc_text = "PrfPrc"|tagfilter(_from, _to) %}

    {## For cleaning verb tags ##}
    {% macro clean_tag(tag_input) -%}
        {% set filtered_tag = tag_input|tagfilter(_from, _to) %}
        {% if verb_text_imp in filtered_tag %}
            {{ filtered_tag|replace(verb_text, "")
                           |replace(verb_second_p, "")}}
        {% elif prfprc_text in filtered_tag %}
            {{ filtered_tag|replace(prs_text, "")
                        |replace(verb_text, "")
                        |replace(sg_text, "") 
                        |replace(msc_text, "") }}
        {% else %}
            {{ filtered_tag|replace(prs_text, "")
                        |replace(prt_text, "")
                        |replace(verb_text, "")
                        |replace(verb_text_ind, "")
                        |replace(verb_text_sbj, "") }}
        {% endif %}
    {%- endmacro %}
{% endif %}

{## Adjective specific macros and definitions ##}
{%- if pos|upper == 'A'  %}

    {% set mf_text = "MF"|tagfilter(_from, _to) %}
    {% set pos_text = "A"|tagfilter(_from, _to) %}
    {% set ord_text = "Ord"|tagfilter(_from, _to) %}
    {% set superl_text = "Superl"|tagfilter(_from, _to) %}
    {% set msc_text = "Msc"|tagfilter(_from, _to) %}
    {% set fem_text = "Fem"|tagfilter(_from, _to) %}

    {% macro clean_tag(tag_input) %}
        {% set filtered_tag = tag_input|tagfilter(_from, _to) %}
        {% if superl_text in filtered_tag %}
            {{ filtered_tag|replace(pos_text, "")
                           |replace(ord_text, "") 
                           |replace(mf_text, "")
                           |replace(msc_text, "msc")
                           |replace(fem_text, "fem") }}
        {% else %}
            {{ filtered_tag|replace(pos_text, "")
                           |replace(ord_text, "") 
                           |replace(mf_text, "") }}
        {% endif %}
    {% endmacro %}

{% endif -%}

{% macro link_lemma_paradigm(lemma_par, msd_par) -%}
    {% if not orig_from %}
        {% set orig_from = _from %}
    {% endif %}
    {%- set korp_opts = current_pair_settings.korp_options %}
    {% if korp_opts.lemma_search_path and lemma_par -%}
        {% set l_host = current_pair_settings.korp_search_host %}
        {% set query_path = 'cqp|[lemma = "INPUT_LEMMA" & msd = "INPUT_MSD"]' %}

        {% if korp_opts.is_korp_default_lang %}
            {% set search_path = korp_opts.lemma_search_path_default_lang %}
        {% else %}
            {% set search_path = korp_opts.lemma_search_path.replace('TARGET_LANG_ISO', orig_from) %}
        {% endif %}

        {% if korp_opts.korp_parallel %}
            {% set search_path = korp_opts.bilingual_wordform_search_path
                        .replace('TARGET_LANG_ISO', orig_from) %}
            {% set query_path = 'cqp|[lemma = "INPUT_LEMMA" & msd = "INPUT_MSD"]' %}
        {% endif %}

        {% set query = search_path.replace(
            'SEARCH_QUERY',
            query_path.replace(
                'INPUT_LEMMA',
                lemma_par
            ).replace('INPUT_MSD',
            msd_par)|urlencode_quote(safe="#/"))
        %}
    {%- endif %}
{%- endmacro %}

{## Paradigm link macro ##}
{%- macro full_paradigm_link() %}
            {# URLFOR #}
    <a class="full-paradigm-link"
       style="opacity: .8;"
       href="https://es.wiktionary.org/wiki/{{ lemma }}#ConjugaciÃ³n">
        {%- trans -%}Full paradigm{%- endtrans -%} &nbsp;&rarr;
    </a>
{% endmacro -%}



{# Display #}

{## Verb paradigm ##}

{% if pos|upper == 'V' %}
    <table class="tableparadigm miniparadigm">

        {# This is the two-column tense paradigm #}
        {# First, the indicative forms: #}

        <tr>
            <th lang="{{ _to }}">{{ verb_text_ind }}</th>
            <th lang="{{ _to }}">{{ prs_text }} <em>(hoy)</em></th>
            <th lang="{{ _to }}">{{ prt_text }} <em>(ayer)</em></th>
        </tr>

        {%- for present_forms, preterite_forms in zipped_verbs_ind -%}
            <tr>

            {% if present_forms[0].tag %}
                {% set tag_display = clean_tag(present_forms[0].tag) %}
            {% elif preterite_forms[0].tag %}
                {% set tag_display = clean_tag(preterite_forms[0].tag) %}
            {% endif %}

            <th class="tag" lang="{{ _to }}">{{ tag_display }}</th>

            {% set dict_prs = {'1.p.ent.': 'V.Ind.Prs.Sg1', '2.p.ent.': 'V.Ind.Prs.Sg2', '3.p.ent.': 'V.Ind.Prs.Sg3', '1.p.flt.': 'V.Ind.Prs.Pl1', '2.p.flt.': 'V.Ind.Prs.Pl2', '3.p.flt.': 'V.Ind.Prs.Pl3'} %}
            {% set msd_var_prs = [] %}
            {% for key, value in dict_prs.items() %}
                {% if key|string in tag_display|string %}
                {% do msd_var_prs.append(value|string) %}
                {% endif %}
            {% endfor %}

            {% set dict_prt = {'1.p.ent.': 'V.Ind.Prt.Sg1', '2.p.ent.': 'V.Ind.Prt.Sg2', '3.p.ent.': 'V.Ind.Prt.Sg3', '1.p.flt.': 'V.Ind.Prt.Pl1', '2.p.flt.': 'V.Ind.Prt.Pl2', '3.p.flt.': 'V.Ind.Prt.Pl3'} %}
            {% set msd_var_prt = [] %}
            {% for key, value in dict_prt.items() %}
                {% if key|string in tag_display|string %}
                {% do msd_var_prt.append(value|string) %}
                {% endif %}
            {% endfor %}

            {% if present_forms and present_forms != '-' %}
                {% set s_display = link_lemma_paradigm(lemma, msd_var_prs[0]|string) %}
                <td lang="{{ _from }}">{{ present_forms|join('<br />', attribute='form')|safe }}</td>
                {% else %}
                <td lang="{{ _from }}">&mdash;</td>
            {% endif %}

            {% if preterite_forms and preterite_forms != '-' %}
                {% set s_display = link_lemma_paradigm(lemma, msd_var_prt[0]|string) %}
                <td lang="{{ _from }}">{{ preterite_forms|join('<br />', attribute='form')|safe }}</td>
            {% else %}
                <td lang="{{ _from }}">&mdash;</td>
            {% endif %}

            </tr>

        {%- endfor -%}
    </table>
    <table class="tableparadigm miniparadigm">
        {# Then, the subjunctive and imperative forms: #}
        <tr>
            <th></th>
            <th lang="{{ _to }}">{{ verb_text_sbj }}</th>
            <th lang="{{ _to }}">{{ verb_text_imp }}</th>
        </tr>

        {%- for subjunctive_forms, imperative_forms in zipped_verbs_sbj_imp -%}
            <tr>

            {% if subjunctive_forms[0].tag %}
                {% set tag_display = clean_tag(subjunctive_forms[0].tag) %}
            {% elif imperative_forms[0].tag %}
                {% set tag_display = clean_tag(imperative_forms[0].tag) %}
            {% endif %}

            <th class="tag" lang="{{ _to }}">{{ tag_display }}</th>

            {% set dict_prs = {'1.p.ent.': 'V.Ind.Prs.Sg1', '2.p.ent.': 'V.Ind.Prs.Sg2', '3.p.ent.': 'V.Ind.Prs.Sg3', '1.p.flt.': 'V.Ind.Prs.Pl1', '2.p.flt.': 'V.Ind.Prs.Pl2', '3.p.flt.': 'V.Ind.Prs.Pl3'} %}
            {% set msd_var_prs = [] %}
            {% for key, value in dict_prs.items() %}
                {% if key|string in tag_display|string %}
                    {% do msd_var_prs.append(value|string) %}
                {% endif %}
            {% endfor %}

            {% set dict_prt = {'1.p.ent.': 'V.Ind.Prt.Sg1', '2.p.ent.': 'V.Ind.Prt.Sg2', '3.p.ent.': 'V.Ind.Prt.Sg3', '1.p.flt.': 'V.Ind.Prt.Pl1', '2.p.flt.': 'V.Ind.Prt.Pl2', '3.p.flt.': 'V.Ind.Prt.Pl3'} %}
            {% set msd_var_prt = [] %}
            {% for key, value in dict_prt.items() %}
                {% if key|string in tag_display|string %}
                {% do msd_var_prt.append(value|string) %}
                {% endif %}
            {% endfor %}

            {% if subjunctive_forms and subjunctive_forms != '-' %}
                {% set s_display = link_lemma_paradigm(lemma, msd_var_prs[0]|string) %}
                <td lang="{{ _from }}">{{ subjunctive_forms|join('<br />', attribute='form')|safe }}</td>
            {% else %}
                <td lang="{{ _from }}">&mdash;</td>
            {% endif %}

            {% if imperative_forms and imperative_forms != '-' %}
                {% set s_display = link_lemma_paradigm(lemma, msd_var_prs[0]|string) %}
                <td lang="{{ _from }}">{{ imperative_forms|join('<br />', attribute='form')|safe }}</td>
            {% else %}
                <td lang="{{ _from }}">&mdash;</td>
            {% endif %}

            </tr>

        {%- endfor -%}
    </table>
    {# Then, the nonfinite gerund, imperative and participle forms: #}
    <dl class="dl-horizontal miniparadigm">
            {% if nonfinite_header %}
                <dt>{{ nonfinite_header }}</dt><dd lang="{{ _to }}">{{ verb_text_imp }}</dd>
            {% endif %}

            {% set noninf_forms = nonfinite_forms|group_by_tag %}
            {% for var in noninf_forms %}
                {% if var[0].tag %}
                    <dt>{{ clean_tag(var[0].tag) }}</dt>
                {% endif %}
                <dd lang="{{ _from }}">{{ var|join('<br />', attribute='form')|safe }}</dd>
            {% endfor %}
        </dl>


{## Noun paradigm ##}

{% elif pos|upper == 'N' %}

    {% if paradigm_exists %}
    <dl class="dl-horizontal miniparadigm">
        {%- for form in paradigm -%}

            {% if form.tag %}
                <dt>{{ clean_tag(form.tag|tagfilter(_from, _to))  }}</dt>
            {% endif %}

            {% if form.form %}
            <dd lang="{{ _from }}">{{ form.form }}</dd>
            {% else %}
                <dd lang="{{ _from }}">?</dd>
            {% endif %}
        {%- endfor -%}
    </dl>
    {% endif %}

{## Adjective paradigm ##}

{% elif pos|upper == 'A' %}
    <dl class="dl-horizontal miniparadigm">
      {% set adj_forms = paradigm|group_by_tag %}

      {{ group_by_tag }}

      {% for var in adj_forms %}
          {% if var[0].tag %}
              <dt>{{ clean_tag(var[0].tag) }}</dt>
          {% endif %}
          <dd lang="{{ _from }}">{{ var|join('<br />', attribute='form')|safe }}</dd>
      {% endfor %}
    </dl>
{% endif %}

{{ full_paradigm_link() }}


{# vim: set ts=4 sw=4 tw=72 syntax=jinja : #}