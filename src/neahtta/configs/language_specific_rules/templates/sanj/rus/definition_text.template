{# This entry is evaluated on a translation-group by translation-group
   basis, and so far only receives the `translation_group` <tg /> node.

   The intent here is to make it easier to insert additional text
   without needing to alter or understand the larger amount of HTML. See
   `sme` for an example of including the @reg attribute.

   Differences from standard template:
   - t_pref preface text

 #}
{%- import "audio_link.macros" as macros with context -%}
{%- macro render_annotation(tg) -%}
    {# Render the annotation (<re />) node, unless it has a @fra_ref. #}
    {%- set annotations = tg.xpath('./re') %}
    {% set fra_ref = tg.xpath('./re/@fra_ref')|count > 0 %}

    {% if annotations|count > 0 and not fra_ref %}
      {% if annotations[0].text is not none %}
        ({{ annotations[0].text }})
      {% endif -%}
    {% endif -%}
{%- endmacro -%}

{%- macro render_preface(tg) -%}
    {# Render the preface (<t_pref />) node #}
    {%- set preface = tg.xpath('./t_pref') %}

    {% if preface|count > 0 %}
      {% if preface[0].text is not none %}
        {{ preface[0].text }}
      {% endif -%}
    {% endif -%}
{%- endmacro -%}

{%- macro render_link(tg, t) -%}
    {# Render a link to the detailed page. One exception: if the lexicon
    annotation entry contains a @fra_ref attribute, then we make a
    reference link, inserting this attribute's value in as a parameter.

         <tg xml:lang="sme">
            <re fra_ref="omtopersoner">om to personer</re>
            <t/>
         </tg>

         -->

         <l pos="Pron"
            type="Recipr"
            orig_entry="hverandre"
            til_ref="omtopersoner">hverandre: om to personer</l>

    #}

    {% set text = t.text %}

    {% set pos = t.attrib.get('pos', '') %}

    {% set explanation = t.attrib.get('expl', '') %}

    {%- if pos == 'Pron' and t.attrib.get('type') %}
        {% set pos_type = t.attrib.get('type')|tagfilter(_from, _to) %}
        {% set pos_text = pos|tagfilter(_from, _to)  + " " + pos_type %}
    {% else %}
        {% set pos_text = pos|tagfilter(_from, _to) %}
    {%- endif %}

    {%- if pos == 'Phrase' %}
        {% set pos_is_phrase = True %}
    {%- endif %}

    {% set pos_text = pos_text|trim %}


    {% set link_target = '' %}
    {% set fra_ref = tg.xpath('./re/@fra_ref') %}

    {% if fra_ref|count > 0 %}
        {# If this is a reference link, then there is no data in the
           <t /> node, so the <re /> becomes the link text.  #}

        {% set annotations = tg.xpath('./re') %}
        {% set reference = fra_ref|join('') %}
        {% set text = annotations[0].text %}
    {% else %}
        {% set reference = false %}
    {% endif %}

    {# Dicts do not always correspond to _from and _to e.g. SoMe. Take that into account when linking.
      This mapping should probably be moved into a config file #}

    {% if _from == 'sjdM' %}
        {% set dict_from = 'sjd' %}
    {% else %}
        {% set dict_from = _from %}
    {% endif %}

    {% if _to == 'sjdM' %}
        {% set dict_to = 'sjd' %}
    {% else %}
        {% set dict_to = _to %}
    {% endif %}

    {%- if reference -%}
        <a href="{{ url_for('.search_pair_referred_search', _from=dict_from, _to=dict_to) }}?l_til_ref={{ reference }}">
          {% if pos_text|length > 0 %}({{ pos_text }}) {% endif %}
          {% if pos_is_phrase %}{% if pos_text|length > 0 %}({{ pos_text }}) {% endif %}{% endif %}
              {{- text -}}
        </a> &rarr;
    {%- else %}
        {%- if text != 'word_not _yet_translated' -%}
        {# Show explanation information if present (sjd-specific) #}
            {% if explanation %}<span class=expl>{{ explanation }}</span>{% endif %}
            <a href="{{ url_for('.detailed_language_pair_search', _from=dict_to, _to=_from, wordform=text, format='html') }}?no_compounds=true&lemma_match=true">
                {{- text -}}
            </a>
        {%- endif -%}
    {%- endif -%}

{%- endmacro -%}

{%- macro render_audio(t) -%}
  {% set has_audio = t.xpath('@audio')|count > 0 %}
  {% if has_audio %}
    {%- set audio_text = t.get('audio', '') %}
    {{ macros.audio_link(audio_text, 'sjd')|safe }}
  {% endif %}
{%- endmacro -%}

{%- macro render_tg(tg) -%}
    {# Render all the texts as individual links, prefaced by a potential
    annotation and potential other preface. #}

    {{ render_preface(tg) }}

    {{- render_annotation(tg) -}}

    {# Aspects б and в should be inside brackets #}
    {% set ns = namespace(firstTime = true) %}
    {% for t in tg.xpath('./t') %}
        {% set aspect = t.attrib.get('aspect', '') %}
        {%- if ns.firstTime and (aspect == "б" or aspect == "в") -%}({%- set ns.firstTime = false %}{%- endif -%}
            {{- render_link(tg, t) -}}{{- render_audio(t) -}}{%- if not loop.last -%}, {% endif -%}
        {%- if loop.last and (aspect == "б" or aspect == "в") -%}){%- endif -%}
    {% endfor %}

{%- endmacro -%}

{%- if translation_group -%}
    <span lang="{{ _to }}">{{ render_tg(translation_group) }}</span>
{%- endif -%}

{#  vim: set ts=4 sw=4 tw=72 syntax=htmljinja : #}
