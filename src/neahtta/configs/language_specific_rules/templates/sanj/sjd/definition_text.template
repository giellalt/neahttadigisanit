{# This entry is evaluated on a translation-group by translation-group
   basis, and so far only receives the `translation_group` <tg /> node.

   The intent here is to make it easier to insert additional text
   without needing to alter or understand the larger amount of HTML. See
   `sme` for an example of including the @reg attribute.

 #}

{%- macro render_annotation(tg) -%}
    {# Render the annotation (<re />) node, unless it has a @fra_ref. #}
    {%- set annotations = tg.xpath('./re') %}
    {% set fra_ref = tg.xpath('./re/@fra_ref')|count > 0 %}

    {% if annotations|count > 0 and not fra_ref %}
      {% if annotations[0].text is not none %}
        ({{ annotations[0].text }})
      {% endif -%}
    {% endif -%}
{%- endmacro -%}

{%- macro render_link(tg, t) -%}
    {# Render a link to the detailed page. One exception: if the lexicon
    annotation entry contains a @fra_ref attribute, then we make a
    reference link, inserting this attribute's value in as a parameter.

         <tg xml:lang="sme">
            <re fra_ref="omtopersoner">om to personer</re>
            <t/>
         </tg>

         -->

         <l pos="Pron"
            type="Recipr"
            orig_entry="hverandre"
            til_ref="omtopersoner">hverandre: om to personer</l>

    #}

    {% set text = t.text %}

    {% set pos = t.attrib.get('pos', '') %}

    {%- if pos == 'Pron' and t.attrib.get('type') %}
        {% set pos_type = t.attrib.get('type')|tagfilter(_from, _to) %}
        {% set pos_text = pos|tagfilter(_from, _to)  + " " + pos_type %}
    {% else %}
        {% set pos_text = pos|tagfilter(_from, _to) %}
    {%- endif %}


    {% set pos_text = pos_text|trim %}

    {# Dicts do not always correspond to _from and _to e.g. SoMe. Take that into account when linking.
      This mapping should probably be moved into a config file #}

    {% if _from == 'sjdM' %}
        {% set dict_from = 'sjd' %}
    {% else %}
        {% set dict_from = _from %}
    {% endif %}

    {% if _to == 'sjdM' %}
        {% set dict_to = 'sjd' %}
    {% else %}
        {% set dict_to = _to %}
    {% endif %}

    <span>{{ text }}</span>


{%- endmacro -%}

{%- macro render_tg(tg) -%}
    {# Render all the texts as individual links, followed by a potential
    annotation. #}

    {% for t in tg.xpath('./t') %}
        {{ render_link(tg, t) -}}{% if not loop.last %}, {% endif %}
    {% endfor %}

    {{- render_annotation(tg) -}}
{%- endmacro -%}

{%- if translation_group -%}
    <span lang="{{ _to }}">{{ render_tg(translation_group) }}</span>
{%- endif -%}

{#  vim: set ts=4 sw=4 tw=72 syntax=htmljinja : #}
