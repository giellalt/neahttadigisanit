{# This is the paradigm template for Kildin Sámi.

 * Nouns: Display everything in the paradigm in a definition list
 * Verbs: Display a table with one column for present tense, and one for
   preterite tense; then display a separate definition list for
   nonfinite forms. For the negative verb and supinum negative verb, we
   also add a title on the table.

   - These are controlled by tagsets. Including more forms for verbs can
   	 be handled by adding more tags to the file `tagsets/sjd.tagset`

    There are rules giving лӣннче a special paradigm based on the preterite.

 #}

{%- set first_l = lexicon_entry|xpath('lg/l')|first %}
{% set lemma = first_l|text %}
{% set pos = first_l|xpath('@pos')|first %}
{% set has_forms = paradigm and paradigm|length > 0 -%}
{% set paradigm_exists = paradigm|length > 0 %}

{%- if pos|upper == 'V' %}
{# As there are many variations and exceptions, especially for ordering the forms, we use a more manual 
   template for verbs than is common elsewhere #}
    {% set verbs = true %}

    {% set prs_sg1  =   paradigm|by_tagset_value("tense", "Prs")
                                |by_tagset_value("number", "Sg1")
                                |without_tagset("negation") %}

    {% set prs_sg2  =   paradigm|by_tagset_value("tense", "Prs")
                                |by_tagset_value("number", "Sg2")
                                |without_tagset("negation") %}

    {% set prs_sg3  =   paradigm|by_tagset_value("tense", "Prs")
                                |by_tagset_value("number", "Sg3")
                                |without_tagset("negation") %}

    {% set prs_pl1  =   paradigm|by_tagset_value("tense", "Prs")
                                |by_tagset_value("number", "Pl1")
                                |without_tagset("negation") %}

    {% set prs_pl2  =   paradigm|by_tagset_value("tense", "Prs")
                                |by_tagset_value("number", "Pl2")
                                |without_tagset("negation") %}

    {% set prs_pl3  =   paradigm|by_tagset_value("tense", "Prs")
                                |by_tagset_value("number", "Pl3")
                                |without_tagset("negation") %}

    {% set prs_sg4  =   paradigm|by_tagset_value("tense", "Prs")
                                |by_tagset_value("number", "Sg4")
                                |without_tagset("negation") %}

    {% set prt_sg1  =   paradigm|by_tagset_value("tense", "Prt")
                                |by_tagset_value("number", "Sg1")
                                |without_tagset("negation") %}

    {% set prt_sg2  =   paradigm|by_tagset_value("tense", "Prt")
                                |by_tagset_value("number", "Sg2")
                                |without_tagset("negation") %}

    {% set prt_sg3  =   paradigm|by_tagset_value("tense", "Prt")
                                |by_tagset_value("number", "Sg3")
                                |without_tagset("negation") %}

    {% set prt_pl1  =   paradigm|by_tagset_value("tense", "Prt")
                                |by_tagset_value("number", "Pl1")
                                |without_tagset("negation") %}

    {% set prt_pl2  =   paradigm|by_tagset_value("tense", "Prt")
                                |by_tagset_value("number", "Pl2")
                                |without_tagset("negation") %}

    {% set prt_pl3  =   paradigm|by_tagset_value("tense", "Prt")
                                |by_tagset_value("number", "Pl3")
                                |without_tagset("negation") %}

    {% set prt_sg4  =   paradigm|by_tagset_value("tense", "Prt")
                                |by_tagset_value("number", "Sg4")
                                |without_tagset("negation") %}

    {% set present_verbs   = paradigm|by_tagset_value("tense", "Prs")
                                     |without_tagset("negation")
                                     |group_by_tag %}

    {% set preterite_verbs = paradigm|by_tagset_value("tense", "Prt")
                                     |without_tagset("negation")
                                     |group_by_tag %}

    {% set nonfinite_forms = paradigm|by_tagset("nonfinite_paradigm") %}

    {# As long as the paradigm files are in order, this will zip
    accurately. If not we need to manually select each form and display
    it. #}

    {# Use izip_longest to fill in the extra blanks spaces when one list
       ends first #}

    {# {% set zipped_verbs = izip_longest(present_verbs, preterite_verbs, fillvalue='-')|list %} #}

    {# strip some parts of the tags that we don't need #}

    {% set prs_text      = "Prs"|tagfilter(_from, _to) %}
    {% set prt_text      = "Prt"|tagfilter(_from, _to) %}
    {% set fut_text      = "Fut"|tagfilter(_from, _to) %}
    {% set conneg_text   = "ConNeg"|tagfilter(_from, _to) %}
    {% set verb_text     = "V"|tagfilter(_from, _to) %}
    {% set verb_text_ind = "Ind"|tagfilter(_from, _to) %}
    {% set prfprc_text   = "PrfPrc"|tagfilter(_from, _to) %}
    {% set neg_text      = "Neg"|tagfilter(_from, _to) %}

    {% set nonfinite_header = False %}
    {% set is_perfect = nonfinite_forms|by_tagset("perfect_prc")|length > 0 %}
    {# we'll know this isn't just a normal verb with a couple negative
        forms because there are 6 #}
    {% set is_negative = nonfinite_forms|by_tagset("negative")|length == 6 %}

    {% if is_negative %}
        {% set nonfinite_header = neg_text %}
    {% endif %}

    {% if is_perfect %}
        {% set nonfinite_header = prfprc_text %}
    {% endif %}

    {% macro clean_tag(tag_input) -%}
        {% set filtered_tag = tag_input|tagfilter(_from, _to) %}
        {% if nonfinite_header and (is_supinum or is_negative) %}
            {% set filtered_tag = filtered_tag|replace(sup_text, "")
                                              |replace(neg_text, "") %}
        {% endif %}

        {% if conneg_text in filtered_tag %}
            {{ filtered_tag|replace(verb_text, "")
                           |replace(verb_text_ind, "") }}
        {% else %}
            {{ filtered_tag|replace(prs_text, "")
                           |replace(prt_text, "")
                           |replace(verb_text, "")
                           |replace(verb_text_ind, "") }}
        {% endif %}
    {%- endmacro %}

{%- endif %}

{%- if pos|upper == 'N' or pos|upper == 'NUM' %}

    {% set sg_forms = paradigm|by_tagset_value("number", "Sg")|group_by_tag %}
    {% set pl_forms = paradigm|by_tagset_value("number", "Pl")|group_by_tag %}

    {# Use izip_longest to fill in the extra blanks spaces when one list
       ends first #}

    {% set zipped_numbers = izip_longest(sg_forms, pl_forms, fillvalue='-')|list %}
    {% set paradigm_exists = zipped_numbers|length > 0 %}

    {% set numberless_forms = paradigm|by_tagset("nouns_null_number") %}

    {% set sg_text = "Sg"|tagfilter(_from, _to) %}
    {% set pl_text = "Pl"|tagfilter(_from, _to) %}

    {% if pos|upper == 'N' %}
        {% set pos_text = pos|upper|tagfilter(_from, _to) %}
    {% elif pos|upper == 'NUM' %}
        {% set pos_text = 'Num'|tagfilter(_from, _to) %}
    {% endif %}

    {% macro clean_tag(tag_input) %}
        {{ tag_input|tagfilter(_from, _to)
                    |replace(pos_text, "")
                    |replace(sg_text, "")
                    |replace(pl_text, "") }}
    {% endmacro %}

{% endif -%}

{%- if pos|upper == 'A'  %}

    {% set adj_text = "A"|tagfilter(_from, _to) %}

    {% macro clean_tag(tag_input) %}
        {{ tag_input|tagfilter(_from, _to)
                    |replace(adj_text, "") }}
    {% endmacro %}

{% endif -%}

{%- if pos|upper == 'PRON'  %}

    {% set pron_text  = "Pron"|tagfilter(_from, _to) %}
    {% set indef_text = "Indef"|tagfilter(_from, _to) %}
    {% set sg_text    = "Sg"|tagfilter(_from, _to) %}
    {% set pl_text    = "Pl"|tagfilter(_from, _to) %}


    {% set pron_type = lexicon_entry|xpath('lg/l/@type') %}
    {% set pron_type_text = pron_type|tagfilter(_from, _to) %}

    {# If there are nominal number markings, then we'll split these
       into two columns. Must determine this by checking the tagsets.

       Works for words like eará, soames, etc.
    #}

    {% set two_columns = False %}

    
    {% set sg1_forms = paradigm|by_tagset_value("number", "Sg1")|group_by_tag %}
    {% set sg2_forms = paradigm|by_tagset_value("number", "Sg2")|group_by_tag %}
    {% set sg3_forms = paradigm|by_tagset_value("number", "Sg3")|group_by_tag %}
    {% set sg_forms = paradigm|by_tagset_value("number", "Sg")|group_by_tag %}
    {% if sg_forms|length == 0 %}
        {% set sg_forms = sg1_forms + sg2_forms + sg3_forms %}
    {% endif %}

    {% set pl1_forms = paradigm|by_tagset_value("number", "Pl1")|group_by_tag %}
    {% set pl2_forms = paradigm|by_tagset_value("number", "Pl2")|group_by_tag %}
    {% set pl3_forms = paradigm|by_tagset_value("number", "Pl3")|group_by_tag %}
    {% set pl_forms = paradigm|by_tagset_value("number", "Pl")|group_by_tag %}
    {% if pl_forms|length == 0 %}
        {% set pl_forms = pl1_forms + pl2_forms + pl3_forms %}
    {% endif %}

    {% set numberless_forms = paradigm|by_tagset("nouns_null_number")|without_tagset("number") %}
    {% if numberless_forms|length > 0 %}
        {% set numberless_forms = numberless_forms|unique|group_by_tag %}
    {% endif %}

    {% if sg_forms|length > 0 and pl_forms|length > 0 %}
        {% set two_columns = True %}
        {% set zipped_numbers = izip_longest(sg_forms, pl_forms, fillvalue='-')|list %}
    {% endif %}

    {% macro clean_tag(tag_input) %}
        {% if two_columns %}
            {{ tag_input|tagfilter(_from, _to)
                        |replace(pron_text, "")
                        |replace(sg_text, "")
                        |replace(pl_text, "")
                        |replace(pron_type_text, "") }}
        {% else %}
            {{ tag_input|tagfilter(_from, _to)
                        |replace(pron_text, "")
                        |replace(pron_type_text, "") }}
        {% endif %}
    {% endmacro %}

{% endif -%}

{%- macro full_paradigm_link() %}
    <a class="full-paradigm-link"
       style="opacity: .8;"
       href="http://gtweb.uit.no/cgi-bin/smi/smi.cgi?text={{ lemma }}&pos={{ pos }}&mode=full&action=paradigm&lang=sjd&plang=sjd">
        {%- trans -%}Full paradigm{%- endtrans -%} &nbsp;&rarr;
    </a>
{% endmacro -%}

{%- if has_forms %}

{%- if pos|upper == 'V' %}

    {% if paradigm_exists %}
        <table class="tableparadigm miniparadigm">

            {# This is the two-column tense paradigm #}

            {% if lemma == "лӣннче" %}
            <tr>
                <th></th>
                <th lang="{{ _to }}">{{ fut_text }} <em>(пуэдтӭм па̄лль)</em></th>
            </tr>
            {% else %}
            <tr>
                <th></th>
                <th lang="{{ _to }}">{{ prs_text }} <em>(та̄рьм)</em></th>
                <th lang="{{ _to }}">{{ prt_text }} <em>(еххта)</em></th>
            </tr>
            {% endif %}


            {% if lemma != "лӣннче" %}
                <tr>
                    <th class="tag" lang="{{ _from }}">мунн</th>
                    <td lang="{{ _from }}">{{ prs_sg1|unique|join("<br />", attribute="form") }}</td>
                    <td lang="{{ _from }}">{{ prt_sg1|unique|join("<br />", attribute="form") }}</td>
                </tr>
                <tr>
                    <th class="tag" lang="{{ _from }}">то̄нн</th>
                    <td lang="{{ _from }}">{{ prs_sg2|unique|join("<br />", attribute="form") }}</td>
                    <td lang="{{ _from }}">{{ prt_sg2|unique|join("<br />", attribute="form") }}</td>
                </tr>
                <tr>
                    <th class="tag" lang="{{ _from }}">со̄нн</th>
                    <td lang="{{ _from }}">{{ prs_sg3|unique|join("<br />", attribute="form") }}</td>
                    <td lang="{{ _from }}">{{ prt_sg3|unique|join("<br />", attribute="form") }}</td>
                </tr>
                <tr>
                    <th class="tag" lang="{{ _from }}">мыйй</th>
                    <td lang="{{ _from }}">{{ prs_pl1|unique|join("<br />", attribute="form") }}</td>
                    <td lang="{{ _from }}">{{ prt_pl1|unique|join("<br />", attribute="form") }}</td>
                </tr>
                <tr>
                    <th class="tag" lang="{{ _from }}">тыйй</th>
                    <td lang="{{ _from }}">{{ prs_pl2|unique|join("<br />", attribute="form") }}</td>
                    <td lang="{{ _from }}">{{ prt_pl2|unique|join("<br />", attribute="form") }}</td>
                </tr>
                <tr>
                    <th class="tag" lang="{{ _from }}">сыйй</th>
                    <td lang="{{ _from }}">{{ prs_pl3|unique|join("<br />", attribute="form") }}</td>
                    <td lang="{{ _from }}">{{ prt_pl3|unique|join("<br />", attribute="form") }}</td>
                </tr>
                <tr>
                    <th class="tag" lang="{{ _from }}">безлич</th>
                    <td lang="{{ _from }}">{{ prs_sg4|unique|join("<br />", attribute="form") }}</td>
                    <td lang="{{ _from }}">{{ prt_sg4|unique|join("<br />", attribute="form") }}</td>
                </tr>

            {% else %} {# if lemma == лӣннче, only show present forms #}
                <tr>
                    <th class="tag" lang="{{ _from }}">мунн</th>
                    <td lang="{{ _from }}">{{ prs_sg1|unique|join("<br />", attribute="form") }}</td>
                </tr>
                <tr>
                    <th class="tag" lang="{{ _from }}">то̄нн</th>
                    <td lang="{{ _from }}">{{ prs_sg2|unique|join("<br />", attribute="form") }}</td>
                </tr>
                <tr>
                    <th class="tag" lang="{{ _from }}">со̄нн</th>
                    <td lang="{{ _from }}">{{ prs_sg3|unique|join("<br />", attribute="form") }}</td>
                </tr>
                <tr>
                    <th class="tag" lang="{{ _from }}">мыйй</th>
                    <td lang="{{ _from }}">{{ prs_pl1|unique|join("<br />", attribute="form") }}</td>
                </tr>
                <tr>
                    <th class="tag" lang="{{ _from }}">тыйй</th>
                    <td lang="{{ _from }}">{{ prs_pl2|unique|join("<br />", attribute="form") }}</td>
                </tr>
                <tr>
                    <th class="tag" lang="{{ _from }}">сыйй</th>
                    <td lang="{{ _from }}">{{ prs_pl3|unique|join("<br />", attribute="form") }}</td>
                </tr>
                <tr>
                    <th class="tag" lang="{{ _from }}">безлич</th>
                    <td lang="{{ _from }}">{{ prs_sg4|unique|join("<br />", attribute="form") }}</td>
                </tr>
            {% endif %}
        </table>

        {% if lemma != "лӣннче" %}
            <dl class="dl-horizontal miniparadigm">
                {% if nonfinite_header %}
                    <dt>{{ nonfinite_header }}</dt><dd>&nbsp;</dd>
                {% endif %}

                {% set noninf_forms = nonfinite_forms|group_by_tag %}
                {% set textshown = 0 %} {# to only show "мунн ля̄" once #}
                {% for var in noninf_forms %}
                    {% if var[0].tag and textshown == 0 %}
                        {% set textshown = 1 %}
                        <dt lang="{{ _from }}">мунн ля̄</dt>
                    {% endif %}
                    <dd lang="{{ _from }}">{{ var|unique|join('<br />', attribute='form') }}</dd>
                {% endfor %}
            </dl>
        {% endif %}
    {% endif %} {# paradigm_exists #}

{% elif pos|upper == 'N' or pos|upper == 'NUM' %}

    {% if paradigm_exists %}

        <table class="tableparadigm miniparadigm">
        {% set contexts = ["Кто? Что?", "Чей?", "Кого? Чего?", "кому? чему? куда?", "У (от) кого? У (от) чего?", "С кем? С чем?", "Без кого? Без чего?", "В кого? Во что?", "много, мало, при сравн."] %}
        {% set i=0 %}

            <tr>
                <th></th>
                <th lang="{{ _to }}">{{ sg_text }}</th>
                <th lang="{{ _to }}">{{ pl_text }}</th>
            </tr>

        {%- for sgs, pls in zipped_numbers -%}
            <tr>

            <th class="tag" lang="{{ _to }}">{{ contexts[i] }}</th>
            {% set i = i+1 %}

            {% if sgs and sgs != '-' %}
                <td lang="{{ _from }}">{{ sgs|unique|join('<br />', attribute='form') }}</td>
            {% else %}
                <td lang="{{ _from }}" class="center">&mdash;</td>
            {% endif %}

            {% if pls and pls != '-' %}
                <td lang="{{ _from }}">{{ pls|unique|join('<br />', attribute='form') }}</td>
            {% else %}
                <td lang="{{ _from }}" class="center">&mdash;</td>
            {% endif %}

            </tr>

        {%- endfor -%}

        {% set numb_forms = numberless_forms|group_by_tag %}
        {% set i=7 %}
        {% for var in numb_forms %}
            <tr>
                {% if var[0].tag %}
                    <th class="tag" lang="{{ _to }}">{{ contexts[i] }}</th>
                    {% set i = i+1 %}
                {% endif %}
                <td colspan="2" lang="{{ _from }}" class="center">{{ var|join('<br />', attribute='form') }}</td>
            </tr>
        {% endfor %}

        </table>

    {% endif %}

{% elif pos|upper == 'A' %}

    <dl class="dl-horizontal miniparadigm">
        {% set adj_forms = paradigm|group_by_tag %}

        {% for var in adj_forms %}
            {% if var[0].tag %}
                <dt>{{ clean_tag(var[0].tag) }}</dt>
            {% endif %}
            <dd lang="{{ _from }}">{{ var|unique|join('<br />', attribute='form') }}</dd>
        {% endfor %}
    </dl>

{% elif pos|upper == 'PRON' %}
    {% set contexts = ["Кто? Что?", "Чей?", "Кого? Чего?", "кому? чему? куда?", "У (от) кого? У (от) чего?", "С кем? С чем?", "Без кого? Без чего?", "В кого? Во что?", "много, мало, при сравн."] %}
    {% set i=0 %}

    {% if two_columns %}

        {% if paradigm_exists %}

            <table class="tableparadigm miniparadigm">
                <tr>
                    <th></th>
                    <th lang="{{ _to }}">{{ sg_text }}</th>
                    <th lang="{{ _to }}">{{ pl_text }}</th>
                </tr>

            {%- for sgs, pls in zipped_numbers -%}
                <tr>
                <th class="tag" lang="{{ _to }}">{{ contexts[i] }}</th>
                {% set i = i+1 %}

                {% if sgs and sgs != '-' %}
                    <td lang="{{ _from }}">{{ sgs|join('<br />', attribute='form') }}</td>
                {% else %}
                    <td lang="{{ _from }}" class="center">&mdash;</td>
                {% endif %}

                {% if pls and pls != '-' %}
                    <td lang="{{ _from }}">{{ pls|join('<br />', attribute='form') }}</td>
                {% else %}
                    <td lang="{{ _from }}" class="center">&mdash;</td>
                {% endif %}

                </tr>
            {%- endfor -%}  
            {%- if numberless_forms|length > 0 -%}
                {%- for form in numberless_forms -%}
                    {% set i = 7 %}
                    <tr>
                        <th class="tag" lang="{{ _to }}">{{ contexts[i] }}</th>
                        <td lang="{{ _to }}">{{ form|join('<br />', attribute='form') }}</td>
                        <td></td>
                    </tr>
                    {% set i = i+1 %}
                {%- endfor -%}
            {%- endif -%}
            </table>


        {% endif %}
    {% else %}
        <dl class="dl-horizontal miniparadigm">
            <dt>{{ pron_text }} {{ pron_type_text }}</dt>
            <dd>&nbsp;</dd>
            {%- for form in paradigm -%}

                {% if form.tag %}
                    <dt>{{ clean_tag(form.tag) }}</dt>
                {% endif %}

                {% if form.form %}
                <dd lang="{{ _from }}">{{ form.form }}</dd>
                {% else %}
                    <dd lang="{{ _from }}">?</dd>
                {% endif %}
            {%- endfor -%}
        </dl>
    {% endif %}


{% else %}
    <dl class="dl-horizontal miniparadigm">
        {%- for form in paradigm -%}

            {% if form.tag %}
                <dt>{{ form.tag|tagfilter(_from, _to)  }}</dt>
            {% endif %}

            {% if form.form %}
            <dd lang="{{ _from }}">{{ form.form }}</dd>
            {% else %}
                <dd lang="{{ _from }}">?</dd>
            {% endif %}
        {%- endfor -%}
    </dl>

{% endif %}
{# if paradigm_exists %}
    {{ full_paradigm_link() }}
{% endif #}
{% endif -%}


{# vim: set ts=4 sw=4 tw=72 syntax=htmljinja : #}
